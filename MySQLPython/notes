https://www.youtube.com/watch?v=HXV3zeQKqGY&t=1213s
https://www.mikedane.com/databases/sql/nested-queries/


Database - Collection of Similar Data or related information

Database Management System (DBMS) make it easy to create, maintain and secure a Database
DBMS allows us to perform CRUD operations (create, read, update and Delete)

We always query the DatabaseMS
for example if we are searching for any products in flipkart.com then as soon as we hit the search button
the flipkart takes the query to DBMS and DBMS returns the result which is shown to us
by the flipkart...


There are two types of Databases:-
1.) Relational Database ( stores data in form of tables..rows and columns) SQL is used
eg:- sqlserver, mysql, postgresdb etc

2.) Non - Relational
(Stores data in other datastructures such as json xml etc)
Eg - mongo, couchDB , cassendra etc


TABLE and KEYS

Primary Key - To uniqely identify a specific row
a primary key can be anything but it should be unique


Surrogate Key :- A primary key but it is not mapped anywhere else...just used for th purpose
of identifying a row
eg - keys like 1,2,3,4,5

Natural Key :- A key which has a mapping in the real world..
For ex - Aadhar Card Number of each citizen


Foreign Key:-
A key which defines a relationship between tables
so this column content is a primary key in some other table (column names can be different)

now we can have more information stored about something in some other table

a table can have more than one foreign keys and foreign key can belong to the same table
emp_id as primary key and supervisor_id as foreign key


Composite Key:-
A key made up of more than 1 attribute(columns)
and the attributes can also be foreign keys


SQL:-
Structured Query Language:-

There are many DBMS but we can't use the same SQL on each of them
The idea is same but the syntax is different

So SQL is a hybrid language. Its basically 4 language in 1
Data Query Language (DQL)

Data Definition Language (DDL)

Data Control Language (DCL)

Data Manipulation Language(DML)



1:15:00
Creating Tables

Data Types:-
INT     -- Whole Number
DECIMAL(M,N)  -- 'M - total no of digits N - digits after decimal point'
VARCHAR(n)  'String of text of length n'
BLOB    -- Binary, Large Object
DATE    -- 'YYYY-MM-DD'
TIMESTAMP -- 'YYYY-MM-DD HH:MM:SS'

use test_db1;

CREATE TABLE student (
student_id INT,
name VARCHAR(30),
major VARCHAR(30),
PRIMARY KEY(student_id)
);

DESCRIBE student; ->

Field	Type	Null	Key	Default	Extra
student_id	int(11)	NO	PRI	NULL
name	varchar(30)	YES		NULL
major	varchar(30)



* To delete a table
DROP TABLE student;

* To modify the table ( add a column)
ALTER TABLE student ADD gpa DECIMAL(3,2);

* Deleting a column from a table
ALTER TABLE student DROP COLUMN gpa;


INSERTING DATA into Tables

*
INSERT INTO student VALUES(1, 'Jack', 'Biology');

INSERT INTO student(student_id, name) VALUES (3, 'Shaan');

* Deleting a row from  a table
DELETE FROM student where student_id = 3;

CREATE TABLE student (
student_id INT,
name VARCHAR(30) NOT NULL,
major VARCHAR(30) UNIQUE,
PRIMARY KEY(student_id)
);

INSERT INTO student VALUES(3, NULL , 'English');
INSERT INTO student VALUES(4, 'Jack', 'Biology');

ER_BAD_NULL_ERROR: Column 'name' cannot be null
ER_DUP_ENTRY: Duplicate entry 'Biology' for key 'major'


These are called "Constraints" (not null, Unique, etc)

some more
* major VARCHAR(30) DEFAULT 'undecided', ( Gives a default value if not specified in Insert)
* AUTO_INCREMENT  -- student_id INT AUTO_INCREMENT, (Id increments automatically)
example -> INSERT INTO student(name, major) VALUES('Shaan', 'Actor')


UPDATE and DELETE:-

* UPDATE student SET major = 'Bio' where major='Biology';

* where major = 'Bio' OR major = 'Chemstry'

* UPDATE student SET name = 'Shaan', major = 'Actor' where id = 1

DELETE :
DELETE FROM student where student_id = 3;



# BASIC QUERIES :-

SELECT -> To get the info

* Select * from student ORDER BY name DESC  ( asc for ascending)
ORDER BY major, student_id

* SELECT * from student LIMIT 2;

* SELECT * from student ORDER BY name LIMIT 2 ;

* SELECT * from student where name IN ('Mike', 'Jack') AND student_id > 2;

* select * from student where major REGEXP 'Comp*';  (using REGEX)

* SELECT DISTINCT sex FROM employee; ( All the unique entries )

*


###
-- (comment)
<
>
< =
> =
<> (Not equal to)
AND
OR
###

2:08:38 (company database info)

Foreign Key Syntax:

  mgr_id INT,
  FOREIGN KEY(mgr_id) REFERENCES employee(emp_id) ON DELETE SET NULL


Makinng foreign keys after creating a table

ALTER TABLE employee
ADD FOREIGN KEY(branch_id)
REFERENCES branch(branch_id)
ON DELETE SET NULL;

ALTER TABLE employee
ADD FOREIGN KEY(super_id)
REFERENCES employee(emp_id)
ON DELETE SET NULL;


COMPOSITE KEY and ON DELETE CASCADE

CREATE TABLE works_with (
  emp_id INT,
  client_id INT,
  total_sales INT,
  PRIMARY KEY(emp_id, client_id),
  FOREIGN KEY(emp_id) REFERENCES employee(emp_id) ON DELETE CASCADE,
  FOREIGN KEY(client_id) REFERENCES client(client_id) ON DELETE CASCADE
);



FUNCTIONS :-

-- Find the number of employees
SELECT COUNT(super_id)
FROM employee;

-- SELECT DISTINCT CITY from STATION where MOD(ID, 2) = 0;  (EVEN NUMBERS)

-- SELECT COUNT(CITY) - COUNT(DISTINCT CITY) AS N FROM STATION (MINUS and UNIQUE SYNTAX)

-- select CITY, length(CITY)from station order by length(CITY), city limit 1;
-- select CITY, length(CITY)from station order by length(CITY) desc, city limit 1

-- Find the average of all employee's salaries
SELECT AVG(salary)
FROM employee;

-- Find the sum of all employee's salaries
SELECT SUM(salary)
FROM employee;

-- Find out how many males and females there are
SELECT COUNT(sex), sex
FROM employee
GROUP BY sex;

COUNT(sex)	sex
6	        M
3	        F


-- Find the total sales of each salesman
SELECT SUM(total_sales), emp_id
FROM works_with
GROUP BY client_id;

-- Find the total amount of money spent by each client
SELECT SUM(total_sales), client_id
FROM works_with
GROUP BY client_id;



 WILD CARDS

% = any noo of  characters,
_ = one character

SELECT *
FROM client
WHERE client_name LIKE '%LLC';



UNION - To merge many select statements

SELECT employee.first_name AS Employee_Branch_Names
FROM employee
UNION
SELECT branch.branch_name
FROM branch;


They should have same no of columns and same datatypes



JOINS:-
Combining information from different tables into a single result

-- Add the extra branch
INSERT INTO branch VALUES(4, "Buffalo", NULL, NULL);

-- INNER JOIN

SELECT employee.emp_id, employee.first_name, branch.branch_name
FROM employee
JOIN branch    -- LEFT JOIN, RIGHT JOIN
ON employee.emp_id = branch.mgr_id;



NESTED QUERY
3:11:00

-- Find names of all employees who have sold over 50,000
SELECT employee.first_name, employee.last_name
FROM employee
WHERE employee.emp_id IN (SELECT works_with.emp_id
                          FROM works_with
                          WHERE works_with.total_sales > 50000);

-- Find all clients who are handles by the branch that Michael Scott manages
-- Assume you know Michael's ID
SELECT client.client_id, client.client_name
FROM client
WHERE client.branch_id = (SELECT branch.branch_id
                          FROM branch
                          WHERE branch.mgr_id = 102);


ON DELETE
3:22

1.) ON DELETE SET NULL

when a foreign key references to some other column of some table, then by using this option
whenever you delete that reference the foreign key is set to NULL

2.) ON CASCADE :

This deletes the entire row of the foreign key table

use (1) when there is no dependency on the foreign key
use (2) when the foreign key is also the primary/composite key


TRIGGERS

-- TRIGGERS

-- CREATE
--     TRIGGER `event_name` BEFORE/AFTER INSERT/UPDATE/DELETE
--     ON `database`.`table`
--     FOR EACH ROW BEGIN
-- 		-- trigger body
-- 		-- this code is applied to every
-- 		-- inserted/updated/deleted row
--     END;


DELIMITER $$
CREATE
    TRIGGER my_trigger BEFORE INSERT
    ON employee
    FOR EACH ROW BEGIN
        INSERT INTO trigger_test VALUES('added new employee');
    END$$
DELIMITER ;

DELIMITER $$
CREATE
    TRIGGER my_trigger3 BEFORE INSERT
    ON employee
    FOR EACH ROW BEGIN
         IF NEW.sex = 'M' THEN
               INSERT INTO trigger_test VALUES('added male employee');
         ELSEIF NEW.sex = 'F' THEN
               INSERT INTO trigger_test VALUES('added female');
         ELSE
               INSERT INTO trigger_test VALUES('added other employee');
         END IF;
    END$$
DELIMITER ;