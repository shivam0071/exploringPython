FIX protocol - Financial Information eXchange


Message Type 35=

Value

8 - Execution

D - Order

3 - Session Reject


39 = 0 





There are many python stuff which i think i am going to forget


Closure

Decorator  ✔

ABC

Inheritance Concepts and Polymorphism

Iterator

Generator

Lambda  ✔

Map, Filter, Reduce     ✔

Coroutines

Protocols

Threading

All the syntax of list comprehinsion and map reduce lambda etc ✔

Metaclasses and Stuff

abstract class and stuff

static methods ✔

class methods

Using Super

Properties

OS module for shell stuff and files handling?

Collection Class

Command Line Parser ✔ - # https://docs.python.org/2/howto/argparse.html#id1




Python is dynamic Type -- variable types are given at run time and not at compile time (java,c)


Slicing doesn't gives array index out of range


Hashable Objects-- All immatable objects are hashable (tuples Strings etc)


and all mutable objects are unhashable (list,dict) 


if-else -  Another way


a = 23 if x > 20 else 10

or

print ('hi') if a==b else print('bye')



Strings


Strings are immutable(that means it doesn't support str[1] = e ) {this is trying to make changes to an alphabet residing in that memory location...which we can't...)

You have to make a new string...


Supports 

str*3 -- strstrstr

str + str2 

("shivam"" is cool") == 'shivam is cool'

slicing

str.count('a')

str.strip() removes the whitespaces,


str.split(sep,maxsplit)

#returns a list


"-".join(str) # S-h-i-v-a-m

(works with list of strings aswell )



LIST methods :- Implemented as array of pointers to objects(in cpython)


ls.count('shiv')

ls2 = ls.copy() #creates a different copy

ls.reverse() reverses the original list

ls.extend('shivam') #s,h,i,v,a,m

ls.append('46')

ls.pop()/ls.pop(index)

ls.remove(value)

del ls

ls.index('s')

ls.insert(index,value)

ls.sort(key=len , reverse= False)#changes the original list(returns none)

sorted(list,key,reverse) #returns sorted list

you can make ur own functions in keys

ls[::-1]  

or 

lambda x : x[1] --> sorts based on 2nd element in a list of list 


ls._setitem_(key,value) # replaces the content



ls._contains_(value) #True or False


there is another way by which we can remove a list element and it doesn't returns a value(different than pop)


del ls[0]

we can even use slicing in this



Methods like insert(),remove(), sort() that modify the list have no return value printed - they return default None

This is a design principal for all mutable data structures in Python


ls1 + ls2 works same as extend() but it doesn't changes the original list



Tuples :

Tuples are immutable. i.e there are no insert, append or remove methods

u can't

tu[0] = 77 


The elements can be accessed by unpacking,indexing,,where as lists are generally mutable and are accessed by iterating over the list


tuple  = ()

tup = (1,) #  for 1 item only


Unpacking 

t (1,2,3)

a,b,c = t



zip() returns a zip object which further can be converted into list(list of tuples) or a dict


list(zip([1,2,3,4,5],[6,7,8,9,0]))

element wise [(1,6) and so on]


ignores the values if lists are of unmatching size



also we can use zip like

zip([[1,2,3],[4,5,6]])

OR

zip(*SequencelikeaboveOne)


'Shivam' [::-1] returns  mavihS

[::1] here 1 means index by 1 unit

[::2] means index by 2 units  - Sia (output)



Sets:-. Mutable

a set is an unordered collection with no duplicate elements.
basic uses includes membership testing and eliminating duplicate entries


Supports union intersection difference and symmetric difference

s = set() OR s = {1}


a = set('abracadabra')

b = set('alacazam')


a & b -- Intersection ( letters both in a and b) (s.intersection())


a | b -- Union (all the letters) (s.union())


a - b -- A not in B (s.difference())


a ^ b -- unique letters in A B (letters in a or b but not both) 


also supports set comprehension 

using { expr loop condition } 


s = set()


s.add()

s.pop()

s.clear()

s.copy()

s.update(set(sequence))






If u want to know all the functions,variables,modules in a module use dir(moduleName) command 


dir() -- shows the variables and functions used in interactive shell


 dir() doesn't shows the inbuilt functions.

for that

import builtins

dir(builtins)

 

Dictionaries: are Mutable

where keys are of immutable types


A dictionary is an unordered set of key : Value pairs where keys are unique


A dictionary is a mapping between a set of keys and values. The keys() method of a
dictionary returns a keys-view object that exposes the keys. A little-known feature of
keys views is that they also support common set operations such as unions, intersections,

and differences



Key Value Pairs 

a= {1:2,3:4,5:6}

iterates over keys

1 in a - Output : True

6 in a - False


a.get(key) #gets the value

**kwargs returns a dictionary


a.update(dict)  adds a new dictionary to the current

setdefault(key[,d])
If key is in the dictionary, return its value.
If not, insert key with a value of d and return d (defaults to None).

if you try to override a key then the key with last value is only accepted...others are not considered


basic operations


tel = {1:6,3:7}

tel[8] = 9

del [1] 

3 in tel 

True

di = dict(Name = 'Shivam' , Class = 10)

dict comprehinsion is also possible


unpacking a dict (**dict)
you can unpack the values of dict based on keys
for example
def some_method(apple,mango='MANGO',banana='BANANA'):
    print apple,mango,banana

dicti = {'apple':'APP','mango':'MAN','banana':'BAN'}
some_method(**dicti)

this works for any iterator
some_method(*[1,2,3])
some_method(*'SHA')

So the basic of this is that there should be someone accepting the same amount of variables which are
being sent or present in any iterator


Looping Stuff:

when you look over a list or something,try to loop over its copy...as modifying the current
list may cause some issues with the loop (see docs)
so use 

for i in list[:] :

now you can modify the list freely

use enumerate for index and value

for k,v in enumerate (list):


To loop over two or more sequences at the same time use zip()

for q ,a in zip(questions,answers) 

    print(' {0} -- {1}'.format(q,a))


range()

In many ways the object returned by range() behaves as if is a list,
but in fact it isn't. It is an object which returns the successive items of the
desired sequence when u iterate over it, but it doesn't really make the list,
thus SAVING SPACE 

Now when we iterate over for x in range (10) then the value of x
is retained #x = 9 but using LIST Comprehinsion this can be avoided


Iterator and Iterables :

Iterators - For statement, list()

they iterate over Iterables

a list() creates lists from iterables


To iterate in reverse order u use

for i in reversed(range(1,10,2)):



Comparison Operators :-

in and not in checks whether a value occurs in a sequence. 

is and is not compare whether 2 objs are really the same object


Numerical Operators -- More than in is 

Not - Highest priority

Or - Lowest


short circuit operations are performed left to right  a and b or c 




LIST COMPREHINSION: -

A list comprehinsion  cosists of bracket containing an expression followed
by a for clause, then zero or more for or if clauses.

The result will be a new list resulting from evaluating the expression in context of
the for and if clause which follow it....eg- This listcomp combines the elements of two
lists if they are not equal


[(x,y) for x in [1,2,3] for y in [3,1,4] if x!=y]


#[(1,3),(1,4),(2,3),(2,1),(2,4),(3,1),(3,4)]


we can even use a list comprehinsion with in a list comprehinsion


[[row[i] for row in matrix] for i in range (4)]



We can even use ternary operator in list comprehinsion


--> a if True else False

[ [ 1 if j==i else 0 for j in range(5)]  for i in range(5)] 


1,0,0,0,0

0,1,0,0,0

0,0,1,0,0

0,0,0,1,0

0,0,0,0,1


COOL Right?


MODULES:-

Any file that ends with .py is a module


import modulename

Or

from module import function_name


_name_ gives the module name

_main_  --> the top level module

 

if _name_ = '_main_':

    pass


Whenever we write import that the interpreter first looks in the built
in modules if the name is not found ,it searches for a file named spam.py in a
list of directories given by the variable sys.path


sys.path is initialized from these locations:

The directory containing the input script

PYTHONPATH 

Installation dependent default



Packages - they are the folders which contains a no of modules or other packages


so in the top level of the directory there is a file with name 

_init_.py it tells that all these folders are packages

it also contains a variable named _all_ which tells which modules to include when we call

from abc import * 

now only modules mentioned in the file gets imported




INPUT AND OUTPUT


str() and repr() converts objects to string however
repr is more readable to interpreter and str() to human


str('Hi')

'Hi'

repr('Hi')

"'Hi'"


Formatting :

str.format()

Syntax :

'{0} ---> {1} cool '.format('Shaan','Cool')



for x in range (1,11):

     print (repr(x).rjust(2),repr(x*x).rjust(3), end =  ' ')

     print(repr(x*x*x).rjust(4))


1.    1.     1

2.    4.     8



OR


for x in range(1,11):

     print ('{0:2d} {1:3d} {2:4d}'.format(x,xx*x,x*x*x)


rjust- right justified (moves to right space in left)

str.center() -- for center

str.zfill()

'-3.14'.zfill(7)

#-003.14



Keyword args can also be used in Format

'{Shaan}'.format(Shaan:'cool')


An optional : and format specifier can follow the field name {0:3f}


Dictionaries - {0[key]:d} 

d - decimal

f - float



Reading and Writing files

open() returns a file object

open(filename,mode)


f = open ('filenname.txt','w')


f.close()


w -- write

r -- read 

r+ -- read write

a -- append

b -- binary (images,pickle)

with open (file,w) as file:

    pass


No need to close the file here


Whenever a file is reas the cursor moves and it stays there so


f.read() -- reads the whole file

#cursor is at the end.  '\n' 

f.read() -- '' 


f.readline() -- reads a line

f.readlines() -- returns a list


file.write(value) --> writes to the file


f.tell() --> tells where the cursor is

f.seek(pos, fromWhat)

0--from beggining

1-- from pointer

2-- from end


JSON


import json


file.write() saves the content as string and its hard to write numbers
to a file as while reading it we have to convert it back to int..so in order to write
numbers,list, tuple or dictionary we can use json module


json.dumps([1,2,3,4,5,]

[1,2,3,4,5]


or 

json.dump([1,2,3,4,5],file)  -- dump saves to a file


and we can get back the data as

 q = json.load(file)


json is used for serialisation and deserialization
and then can be sent over network to some other computer

JSON: Reading from a file

def json_read(fname):
  try:
    data = open(fname).read()
     return json.loads(data)
 except (IOErrors, ValueError):
      return {}

Writing to a JSON:-
def json_write(fname, data):
  new = json_read(fname)
  if isinstance(data, dict):
      new.update(data)
  try:
      dump = json.dumps(new, indent=2, sort_keys= True, separators = (',' , ': '))
      filejson = open(fname, 'w')
      filejson.write(dump)
      filejson.close()
except IOErrors as err:
     print err

Getting a str versiom of json-dict
def strify(data):
if isinstance (data, dict):
     return {strify (key): strify(value) for key, value in data.iteritems()}
elif isinstance (data, list)
return [ strify(element) for element in data]
elif  isinstance (data, unicode):
  return data.encode('utf-8')
else:
 return data



Pickle is a protocol that can also be used for serialisation and for saving more
complex objects..but it is quite insecure and supports only in python


Closure - As the name suggests...closee....secret...so closure retains a value...
generally a function that returns a function (fun inside a fun)

Sometimes we want a function to retain a value when it was created even though the
scope cease to exist. This technique of using the values of outer parameters within a
dynamic function is another way of defining the closure.

the inner function remembers the environment in which it was created
In other words, the inner function has access to the outer function’s variables and parameters.

example
def startAt(start):
	def incrementBy(inc):
		return start + inc
	return incrementBy

f = startAt(10)
g = startAt(100)

print f(1), g(2)
11 102


we can even use lambda
def startAt(start):
	return lambda inc: start+inc


f = startAt(10)
g = startAt(100)

print f(1), g(2)


Decorator

decorators are same as closure...they return another function but here is a catch
Here we decorate another function with our returning function
So here the function which we decorate becomes another function now for example


def hi(random): #takes a function

  print('hi')

  def bye():

       print('bye')

       random()

       print('things are modified now)

   return bye


def new():

    print ('i am new')



new = hi(new) #now the new has become bye

new() #we are calling bye here...


it you want to add a parameter 

for example

def new(s):

         print ('i am new',s)


then bye become 

def bye(s):

   print('bye')

   random(s)

   print('things are modified now)


@hi

def new (s):

   print('this is how its used in real)



if more than one decorator is used then they are executed bottom to top


@makebold

@makeitalic

def hello():

  return "Hello"


BIHelloIB

Hello




FUNCTIONS


functions vs procedure vs method:

A function returns a value where as a procedure doesn't


A method is a function that belongs to an object and is named obj.methodName
(obj is object/expression) 

in python every function returns NONE implicitly...

When calling a function we use

1.) positional argument (1000,4,5)

2.) Keyword argument(Rs= 1000,rollno= 4)


 keyword arguments must follow positional arguments

(100,rollno=4,5) # Error


In a function we often give default values to the parameters but Important warning: 
The default value is evaluated only once. This makes a difference when a default value
is mutable object such as a list, dictionary or instances,

Eg- 
def f(a,L=[]):

    L.append(a)

    return L


print(f(1))    # [1]

print(f(2)).   #[1,2]

print(f(3)).  #[1,2,3]

 
u can avoid this by

def f(a,L=None):

    if L == None:

         L=[]

   L.append(a)

   return L


Unpacking Argument Lists:

if args are already in a list or tuples but need to be unpacked for a function call
requiring separate positional parameters

eg-

args = [3,6]

list(range(*args))

[3,4,5]


in same way dictionaries can deliver keyword arguments with ** operator


parrot(**d)



Lambda Functions :

Lambda is an anonymous function


y = lambda x: x+1 

y(5)

output - 6

b = lambda n=9: n**2
b()
81
Here, n=x creates a new variable n local to the lambda and computed when the lambda is defined


Example 1


y = lambda x: print('Greater than 3') if x>3 else print ('Less than 3')


y(10)

#greater than 3

I used it like this...print from 1-10 except 3,6,9

ls2 = list(filter(lambda x: x%3 , range(1,11))

 
Map Reduce and Filter

They are function

They are used with a sequence

Map: As the name suggests... A map function is used for mapping of a. sequence


a = list(map(lambda y: y+2,range(10)) 
# [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]


Filter : Filter filters the stuff based on true and false...if something is

0 its False

1 is True

b = list (filter(lambda x: x%5 ==0,nlist)

Reduce :
import functools

Reduce reduces the sequence 

It takes 2 or more ?parameters at a time

Example- ls4 = functools.reduce(lambda x,y : x if x> y else y, nlist2)



CLASSES

Creating a class creates a new "Type" of object


Each Class can have :

    Attributes for maintaining its state

     Methods for modifying its state


Classes are created at runtime and can be modified further after creation

All about class
# https://stackoverflow.com/questions/100003/what-are-metaclasses-in-python/100037#100037




Scope and Namespaces:-


A namespace is a mapping from names to objects


Most namespaces are currently implemented as Python dictionaries,

Example- 

1.) builtin dir names

2.) Global names in modules

3.) Local names in a function invocation

4.) In a sense the set if attributes of an object also formba Namespace


the important thing to know about namespaces is that ther is absolutely no relation
between names in different namespaces

eg- two different modules may both define q function maximise without confusion --
usere of the module must prefix module name



Attributes maybe read only or writeable 

Writeable attributes can also be deleted with del statement

del modname.theanswer 


Namespaces are created at different moments and have different timelines


built-in names - created when python interpreter starts up and is never deleted


Global namespace - when module definition is read in normally, also lasts until the interpreter quits


Function namespace - created when function is called and deleted when function returns



Although scopes are determined statically, they are used dynamically. At any time during execution, there are at least three nested scopes whose namespaces are directly accessible:

the innermost scope, which is searched first, contains the local names

the scopes of any enclosing functions, which are searched starting with the nearest enclosing scope, contains non-local, but also non-global names

the next-to-last scope contains the current module’s global names

the outermost scope (searched last) is the namespace containing built-in name.


If name is declared global,then all references and assignments go directly
to the middle scope containing the module’s global names.

To rebind variables found outside of the innermost scope,
the nonlocal statement can be used; if not declared nonlocal,
those variables are read-only (an attempt to write to such a variable will simply create a new local variable in the innermost scope, leaving the identically named outer variable unchanged


eg - 


if no global is mentioned then things gets affected only in the innermost scope


example : check in docs

global spam -- creates a spam outside if not created and assigns value to spam of global scope

spam = 6 

To local scope only

def abc

  nonlocal spam = 8

#Assigns value to the previous scope spam.. can't assign to global scope




Classes --- 


Multiple Inheritance:-

attributes are searched from parent class as 

" Depth first, left to right", not searching twice in the same class


classDerivedClassName(Base1,Base2,Base3):

 pass


if an attribute is not found in derivedclassname, it is searched for in Base1 ,
then (recursively) in the base classes of base1, if not found then in base2 and so on


its still more complex that tht

the MRO(method resolution order):



Iterators:

Behind the scene a for statement calls iter() on a container object.

This function returns an Iterator object that
defines the _next_() which accesse elements in the container one
at a time...when no more elements are left it raises a STOPIteration exception
which tells the for loop to terminate


So this is the iterator protocol now we can add this behaviour to our own classes


Define an iter method that returns object with a next method OR if
class defines next then iter can return self



eg-- psudo code

class reverse:

    def init(self,data)
         self.data = data
         self.index = len(data)

      def _iter_(self):
           return self

       def _next_(self):
             if self.index == 0:
                   raise StopIteration
             self.index = self.index - 1
             return self.data[self.index]



GENERATORS :
GEenerators are powerful tools for creating iterators.
They use yield statement whenever they want to return the data

def reverse(data):

     for index in range(len(data)-1,-1,-1):                           
        yield data[index]


Anything done with iterator can also be done using iterator...

in generator _iter() and next_() are created automatically


Generator Expressions :-

they can be made like list comprehinsion but just parenthesis are used here

They are more memory friendly


a = (i*i for i in range(10))



Metaclass in python :-
https://stackoverflow.com/questions/100003/what-are-metaclasses-in-python

A metaclass is the class of a class. Like a class defines how an instance of the class behaves,
a metaclass defines how a class behaves. A class is an instance of a metaclass.

type(name, bases, dict) --> a new type
so a Metaclasses take 3 args. 'name', 'bases' and 'dict'
where
name is the name of the class
bases is the args passed -- ()
while dict is all the class variable and functions used -- {}

OR
type works this way:

type(name of the class,
     tuple of the parent class (for inheritance, can be empty),
     dictionary containing attributes names and values)



Abstract Base Class

Abstract classes are classes that contain one or more abstract methods.
An abstract method is a method that is declared, but contains no implementation.
Abstract classes may not be instantiated, and require subclasses to provide implementations
for the abstract methods.

from abc import ABC, abstractmethod

class AbstractClassExample(ABC):

    def __init__(self, value):
        self.value = value
        super().__init__()

    @abstractmethod
    def do_something(self):
        pass


class DoAdd42(AbstractClassExample):
  def do_something(self):
    return self.value + 42


class DoMul42(AbstractClassExample):

  def do_something(self):
    return self.value * 42


add = DoAdd42(1)
mul = DoMul42(2)
print(add.do_something(),mul.do_something())

A class that is derived from an abstract class cannot be instantiated unless all of its abstract methods are overridden.

You may think that abstract methods can't be implemented in the abstract base class.
This impression is wrong: An abstract method can have an implementation in the abstract class!
Even if they are implemented, designers of subclasses will be forced to override the
implementation. Like in other cases of "normal" inheritance, the abstract method can be invoked
with super() call mechanism. This makes it possible to provide some basic functionality in the
abstract method, which can be enriched by the subclass implementation.


____________________________________________________________________________________
static methods:-

Static methods and vars are common for each class, they are usually called from Class
Class.method() Class.var

We can define class variables and static methods with @staticmethod decorator or simply by
removing self from the method args
Example :-

class Dog:
    count = 0  #static vars
    dogs = []

    def __init__(self, name):
        self.name = name
        Dog.count += 1
        Dog.dogs.append(name)

    def bark(self):
        print('grrrrrrrrrrrr...woof woof')

    def rollback():                 #Class method made implicitly
        print(Dog.count,Dog.dogs)

    @staticmethod                   #Class method made explicitly
    def jump():
        print(Dog.count,Dog.dogs)
        print("JUMP")

scrappy = Dog("Scrappy")
tommy = Dog("Tommy")
tommy.bark()
Dog.rollback() #calling static methods, unable to call from instance tommy
Dog.jump()      # calling static methods
tommy.jump()    #also unable to call from instance tommy

OUTPUT:-
grrrrrrrrrrrr...woof woof
2 ['Scrappy', 'Tommy']
2 ['Scrappy', 'Tommy']
JUMP
2 ['Scrappy', 'Tommy']
JUMP
____________________________________________________________________________________


getattr(object, method, Defaultattribute)

It returns the method or any attribute related to that object(that is present in that class)
if its now present then you can just give the default value

now we can even call these functions

So this is useful while making attributes i=on the fly or calling different methods
from one method
for example
do some_thing(obj,name='text'):
    return (getattr(obj,"some_method_%s" % name, some_method_abc))() #returns the func and calls it

___________________________________________________________________________________________

#Memoizing
# Callers can only provide two parameters and optionally pass _cache by keyword
def expensive(arg1, arg2,data, _cache={}):
    print(_cache)
    if (arg1, arg2) in _cache:
        return _cache[(arg1, arg2)]

    # Calculate the value
    # result = ... expensive computation ...
    result = data
    _cache[(arg1, arg2)] = result           # Store result in the cache
    return result

print(expensive(2,3,'Shivam'))
print(expensive(4,3,'k'))
print(expensive(2,3,'Shivam'))

____________________________________________________________________________________________

class methods and stuff


using SUPER

